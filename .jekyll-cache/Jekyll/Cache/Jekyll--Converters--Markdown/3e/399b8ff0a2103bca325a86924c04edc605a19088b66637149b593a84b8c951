I"È<h2 id="1-introducci√≥n">1. Introducci√≥n</h2>

<p><strong>PowerShell</strong> es un int√©rprete de l√≠nea de comandos orientado a objetos. Fue dise√±ado para su uso por parte de administradores, con el prop√≥sito de automatizar tareas o realizarlas de forma m√°s controlada.</p>

<blockquote>
  <p>-info- Las √≥rdenes incluidas en Powershell son muchas y reciben el nombre de <strong>cmdlets</strong> .</p>
</blockquote>

<p><a href="https://docs.microsoft.com/es-es/powershell/scripting/overview?view=powershell-5.1">Manual de PowerShell 5.1 de Microsoft</a></p>

<p>Tenemos dos opciones a la hora de ejecutar PowerShell:
1) Entorno gr√°fico: PowerShell ISE (del ingl√©s, Integrated Scripting Environment).
2) Entorno comando: Windows Powershell</p>

<p><img src="/aso/assets/img/powershell/image-20230714211446318.png" alt="image-20230714211446318" /></p>

<h3 id="execution-policy">Execution Policy</h3>

<p>La pol√≠tica de ejecuci√≥n de PowerShell es una caracter√≠stica de seguridad destinada a controlar las condiciones bajo las cuales PowerShell carga los archivos de configuraci√≥n y ejecuta scripts. Esta caracter√≠stica ayuda a controlar la ejecuci√≥n de scripts maliciosos.</p>

<p>Tenemos las siguientes pol√≠ticas de ejecuci√≥n:</p>

<ul>
  <li>
    <p><strong>Unrestricted</strong>: Es la pol√≠tica menos restrictiva. Los usuarios pueden ejecutar todos los scripts.</p>
  </li>
  <li>
    <p><strong>Bypass</strong>: Al igual que unrestricted, esta pol√≠tica de ejecuci√≥n no bloquea nada.</p>
  </li>
  <li>
    <p><strong>Undefined</strong>: PowerShell elimina cualquier pol√≠tica de ejecuci√≥n asignada.</p>
  </li>
  <li>
    <p><strong>RemoteSigned</strong>: Esta pol√≠tica, establece que todos los scripts remotos deben estar firmados.</p>
  </li>
  <li>
    <p><strong>AllSigned</strong>: Todos los scripts deben esta firmados.</p>
  </li>
  <li>
    <p><strong>Restricted</strong>: Es la pol√≠cita m√°s restrictiva. Si se establece esta pol√≠cita no se puede ejecutar ning√∫n script.</p>
  </li>
</ul>

<h2 id="2-comandos-b√°sicos">2. Comandos b√°sicos</h2>

<ul>
  <li><strong>$psversiontable</strong> : Muestra la versi√≥n de PowerShell instalada.</li>
</ul>

<p><img src="/aso/assets/img/powershell/image-20230715104849336.png" alt="image-20230715104849336" /></p>

<ul>
  <li>
    <p><strong>Get-Command</strong> : Muestra todos los comandos disponibles</p>
  </li>
  <li>
    <p><strong>Clear-Host</strong> : Limpia la pantalla</p>
  </li>
</ul>

<p><img src="/aso/assets/img/powershell/image-20230715104944576.png" alt="image-20230715104944576" /></p>

<h3 id="21-comandos-b√°sicos-alias">2.1 Comandos b√°sicos. Alias</h3>

<blockquote>
  <p>-info- Un <strong>alias</strong> es un nombre alternativo o sobrenombre para un cmdlet o un elemento de un comando, como una funcion, un script, un archivo o un archivo ejecutable.</p>
</blockquote>

<p>Podemos utilizar el alias en lugar de el nombre completo del cmdlet. Por ejemplo, podemos utilizar los comandos  ‚Äúdir‚Äù o ‚Äúls‚Äù y muchos m√°s. Estos no son mas que alias definidos a otros comandos de Powershell</p>

<ul>
  <li><strong>Get-Alias</strong> : Nos devuelve un listado con todos los alias definidos en el sistema</li>
</ul>

<p><img src="/aso/assets/img/powershell/image-20230715105148686.png" alt="" /></p>

<ul>
  <li>
    <p><strong>Get-Help  &lt;Comando&gt; :</strong> Muestra ayuda del comando indicado</p>

    <p><img src="https://lh4.googleusercontent.com/vdl-YzlGFChqGyNfmfPvza78qpBGxjUz8Pw5uc4ndTbIKO90eeQpvZkGvSLly-V9V-Fr66U_7xeog3CA0Pul1c2ev9XAenYdyNoTSMdUAZjc-mJvxZCFCBsxyibjzF4VTAaCnDpIkUwPk5CcuHa0J9fbIw=s2048" alt="img" /></p>
  </li>
  <li>
    <p><strong>Get-Help  &lt;Comando&gt; -examples:</strong> Muestra ayuda del comando indicado, mostrando ejemplos.</p>
  </li>
</ul>

<p><img src="https://lh6.googleusercontent.com/WKSh_5cbRsntD99JZI2aJHzUcNgx5yAvqzfOUZsvD83SXA0y083CBEAYWXwIvnVftLtD8EpmyqDqo1Ow6N_NA2FPoS15gQrOvSSUD3fiJmq0tqdbs7YIteCEEEfCPuCsV56725r7UfARi-EYLLTiKt03vw=s2048" alt="img" /></p>

<h2 id="3--comandos-de-fecha-y-hora">3.  Comandos de fecha y hora</h2>

<p>El comando <strong>Get-Date</strong> nos permite recuperar la fecha y hora actuales.</p>

<p><img src="https://lh5.googleusercontent.com/MK-rKiIKftaAdXM1udwa3RhsKc2lvDnC4zPEQdd5efHfWS2sXlGFkLStL-e6IguOWU3NA5bXs2c37QswEDzCy8g6wKx1J_QZz1OfhliyexElpJNyVacfydwP3qJTgUsAAHj6cBbiUeIysG1ar4kE0V-HKA=s2048" alt="img" /></p>

<p>Si deseamos obtener solo la fecha o la hora usaremos el par√°metro <strong>-DisplayHint</strong></p>

<p><img src="https://lh6.googleusercontent.com/IkyNbYIvrSHRJ0GfoBXNVqyBxsUlwfIave4619wmxhBmCS3nuoSRH2v3AntY7pRme5fSSOjLKJ9adArN-5Yz0QhSx6HvW5ZGFdJdu12LTUJMAM-bOYLw7YfI4B_i7PZrT9oBeid-2XIU2nk9l53yHFawpw=s2048" alt="img" /><img src="https://lh3.googleusercontent.com/a4W7xSMe99adzt1HPDZI7dmZ3lbicQOLKna77O1nYTD-e35G_DGH5pSrIHspWUP4rdSSJwSwZSFu9EV-KN_PL1lP3ImVKifIQGM8yqvfN5XOeRQTZm5xwNGiXobpEqZCQVbb1yVXRwMOMK3FAdKpObhOxw=s2048" alt="img" /></p>

<p>Podemos asignar a una variable el resultado del comando Get-Date para almacenar la fecha, hora.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nv">$fechaActual</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Get-Date</span><span class="w">
</span><span class="nv">$fechaHora</span><span class="o">=</span><span class="n">Get-Date</span><span class="w"> </span><span class="err">‚Äú</span><span class="nx">01/12/2018</span><span class="w"> </span><span class="nx">11:00</span><span class="w"> </span><span class="nx">AM</span><span class="err">‚Äù</span><span class="w"> 
</span><span class="nv">$fecha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Get-Date</span><span class="w"> </span><span class="err">‚Äú</span><span class="nx">01/12/2018</span><span class="err">‚Äù</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="4--comandos-de-archivos-y-carpetas">4.  Comandos de archivos y carpetas</h2>

<p><strong>Get-Location (pwd), Set-Location (cd) y Get-ChildItem (ls)</strong></p>

<p><strong>Copiar archivos y carpetas</strong></p>

<p>El comando <strong>Copy-Item</strong> nos permite copiar archivos o carpetas. Ejemplo: Copia todos los archivos de la carpeta scripts de la unidad E: a la carpeta Users/Scripts de la unidad C:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">Copy-Item</span><span class="w"> </span><span class="nx">E:\scripts\</span><span class="o">*</span><span class="w"> </span><span class="nx">C:\Users\scripts\</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Crear una nueva carpeta o archivo</strong></p>

<p>El comando <strong>New-Item</strong> nos permite crear un nuevo archivo o carpeta</p>

<p>Ejemplo: Crea la carpeta scripts en la unidad C:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">New-Item</span><span class="w"> </span><span class="nx">C:\scripts</span><span class="w"> </span><span class="nt">-ItemType</span><span class="w"> </span><span class="nx">directory</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Ejemplo: Crea el archivo ejemplo1.ps1 en la carpeta scripts</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">New-Item</span><span class="w"> </span><span class="nx">C:\scripts\ejemplo1.ps1</span><span class="w"> </span><span class="nt">-ItemType</span><span class="w"> </span><span class="nx">file</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Borrar un archivo o carpeta</strong></p>

<p>El comando <strong>Remove-Item</strong> nos permite borrar un archivo o carpeta.</p>

<p>Ejemplo: Borra el archivo prueba1.ps1</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">Remove-Item</span><span class="w"> </span><span class="nx">C:\scripts\prueba1.ps1</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Ejemplo: Borra todos los archivos de la carpeta scripts</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">Remove-Item</span><span class="w"> </span><span class="nx">C:\scripts\</span><span class="o">*</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Mover un archivo o carpeta</strong></p>

<p>El comando <strong>Move-Item</strong> nos permite mover un archivo de una ubicaci√≥n a otra.</p>

<p>Ejemplo: Borra el archivo prueba1.ps1</p>

<p>Remove-Item C:\scripts\prueba1.ps1</p>

<p>Ejemplo: Borra todos los archivos de la carpeta scripts</p>

<p>Remove-Item C:\scripts*</p>

<p><strong>Renombrar un archivo o carpeta</strong></p>

<p>El comando <strong>Rename-Item</strong> nos permite cambiar el nombre de archivos y carpetas</p>

<p>Ejemplo: Cambia el nombre de script1 a script2</p>

<p>Rename-Item C:\scripts\script1.ps1 script2.ps1</p>

<p><strong>Verificar la existencia de un archivo o carpeta</strong></p>

<p>Uno de los principales usos de <strong>Test-Path</strong> es verificar la existencia de un archivo o carpeta. Si obtenemos el valor <strong>true</strong> existe, en caso contrario devuelve el valor <strong>false</strong></p>

<p>Ejemplo: Devuelve true si script1.ps1 existe</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">Test-Path</span><span class="w"> </span><span class="nx">C:\scripts\script1.ps1</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Verificar la existencia de un archivo o carpeta</strong></p>

<p>Uno de los principales usos de <strong>Test-Path</strong> es verificar la existencia de un archivo o carpeta. Si obtenemos el valor <strong>true</strong> existe, en caso contrario devuelve el valor <strong>false</strong></p>

<p>Ejemplo 1: Devuelve true si script1.ps1 existe</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">Test-Path</span><span class="w"> </span><span class="nx">C:\scripts\script1.ps1</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Ejemplo 2: Devuelve true si $elem existe y es un directorio</p>

<p>Test-Path $elem -PathType container</p>

<h2 id="5-comentarios-variables-y-tipos-de-datos">5. Comentarios, variables y tipos de datos</h2>

<p>Los comentarios en PowerShell se escriben utilizando el s√≠mbolo de <strong>almohadilla</strong> (#).</p>

<p>‚ñ∏ <strong>Comentar una l√≠nea.</strong></p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="w"> </span><span class="c">#Este es un comentario.</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>‚ñ∏ <strong>Comentar un bloque</strong></p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="cm">&lt;#
Esto es un comentario
de varias l√≠neas
#&gt;</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>-info- Una <strong>variable</strong> es una porci√≥n de memoria principal a la que ponemos un nombre que facilite su identificaci√≥n y manejo.</p>
</blockquote>

<p>Su objetivo consiste en permitir el almacenamiento de un valor en particular para su uso posterior a lo largo del <em>script</em>.  Comienzan con el car√°cter <strong>$</strong></p>

<p><strong>Definici√≥n Impl√≠cita</strong></p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$hola</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">‚Äú</span><span class="n">Hola</span><span class="w"> </span><span class="nx">mundo</span><span class="err">‚Äù</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Definici√≥n Expl√≠cita</strong></p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">New-variable</span><span class="w"> </span><span class="nx">hola</span><span class="w">
</span><span class="nv">$hola</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">‚Äú</span><span class="n">Hola</span><span class="w"> </span><span class="nx">mundo</span><span class="err">‚Äù</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li><strong>Get-Variable</strong> : Devuelve un listado completo de las variables que se han definido</li>
</ul>

<p><img src="https://lh3.googleusercontent.com/mJwXgV3s86CFMH801um9mlUmqbYHkKb_VQbRDvnz6jW5S1tXZdUVUAVgv7XG7bvXxb0NA-Ww4IV7JjxKc3eAcsh2VEqnHIFFjCRsRYKD3uDMmPzhGRZWpacHaLUkn5bdpVXWABM29t7eXsXT4bNMIla2pw=s2048" alt="img" /></p>

<h3 id="52-variables-predefinidas">5.2 Variables predefinidas</h3>

<p><strong>Windows Powershell</strong> dispone de muchas variables predefinidas tambi√©n llamadas ‚Äú<em>variables integradas</em>‚Äù o ‚Äú<em>variables internas</em>‚Äú.</p>

<table>
  <thead>
    <tr>
      <th>$true</th>
      <th>Valor true.</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>$false</strong></td>
      <td>Valor false.</td>
    </tr>
    <tr>
      <td><strong>$home</strong></td>
      <td>El directorio home del usuario actual.</td>
    </tr>
    <tr>
      <td><strong>$host</strong></td>
      <td>Informaci√≥n de instalaci√≥n del host.</td>
    </tr>
    <tr>
      <td><strong>$error</strong></td>
      <td>Lista de los errores que han ocurrido desde que se ha iniciado WPS.</td>
    </tr>
  </tbody>
</table>

<p>PowerShell puede acceder a las <strong>variables de entorno</strong>. Estas variables se exponen a trav√©s de una unidad denominada env:.</p>

<ul>
  <li>Muestra todas las variables de entorno</li>
</ul>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">Get-ChildItem</span><span class="w"> </span><span class="nx">env:</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>Muestra el usuario del sistema</li>
</ul>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">USERNAME</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>Muestra el nombre del equipo</li>
</ul>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">COMPUTERNAME</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="53-tipos-de-datos-b√°sicos">5.3 Tipos de datos b√°sicos</h3>

<p><img src="https://lh5.googleusercontent.com/DrA7lM8sbJRri-68r9yBDKu-C7KT-M2wH21K-PYx7Su6U47UBFGLx-VlD0uDdBQfbQ2sJ3k3CtdsNDI7JfdbMloER6LxjyNi4WNC0DnveEKRGkDmr1r5SN_k0p9xjMTnecwNcSP4D5UshUl7v7JeiHKExw=s2048" alt="img" /></p>

<h3 id="54-comando-para-obtener-el-tipo-de-datos-de-una-variable">5.4 Comando para obtener el tipo de datos de una variable</h3>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nv">$numero</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">15</span><span class="w">
</span><span class="nv">$numero</span><span class="o">.</span><span class="nf">GetType</span><span class="p">()</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="https://lh4.googleusercontent.com/F9bvPpsRN2QNFG6Bszo5AtxsUtkzl_C8OaF2l2wtw0vWtloUAYHNnWJJs-TvHttpP72Sm9oP_uh-4so-ILLM2iHcgBkvkjIYBg0yUrf11d20UP23dq5RO6p5NVfVbmDVdTIlZAMfet09cYSebq5cikOOhQ=s2048" alt="img" /></p>

<h3 id="55-definici√≥n-de-variables">5.5 Definici√≥n de variables</h3>

<p>Podemos definir expl√≠citamente el tipo de datos de una variable o asignarle un valor y autom√°ticamente se le asignar√° el tipo de datos correspondiente.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="p">[</span><span class="n">int</span><span class="p">]</span><span class="w"> </span><span class="nv">$var</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">15</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>es equivalente a</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$var</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">15</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="6-operaciones-b√°sicas-en-powershell">6 Operaciones b√°sicas en Powershell</h2>

<h3 id="61-entrada-y-salida-de-informaci√≥n">6.1 Entrada y salida de informaci√≥n</h3>

<ul>
  <li><strong>Read-Host</strong> . Guarda en una variable lo que escriba el usuario, **pero como texto **</li>
</ul>

<p><strong>Pedir informaci√≥n al usuario</strong></p>

<p><img src="https://lh3.googleusercontent.com/avW1MyAsuCw4WyLTOY4-JoVJMEdE7vGHkohbMvMOKAXRklhAPMZke70n2GNPZRtvrlgoKWZbAjsKR-aDOUxaMl6-Uz_qYjk9_A6MjwyDPVRzLteHp10SCgOQkMVrt_kLOeXZTRJLdXaU3TIlZpVC2s1dtA=s2048" alt="img" /></p>

<ul>
  <li><strong>Write-Host</strong>  .Muestra en pantalla un texto o el contenido de una variable.</li>
</ul>

<p><strong>Mostrar informaci√≥n al usuario</strong></p>

<p><img src="https://lh6.googleusercontent.com/G4BO5_x70Jq_pL4u_TlF6NKL9tIPezgAjTzHblJ1ZKfKvyQuG7-T2PDjjd00Nd4bl1s_v1MMOzoxf3LzEx5NUjN0-SosPAEJ-4pkXSErqPnLR0aeHG8CDo4uHR5W9IwRqED4y3SPxlIH0IpHL6M5ElmY1g=s2048" alt="img" /></p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$edad</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Read-Host</span><span class="w"> </span><span class="s2">"Escribe tu edad"</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>-alert- Read-Host  siempre almacena las variables como String (cadena de texto). Esto puede ocasionar problemas cuando estamos intentando almacenar un n√∫mero.</p>
</blockquote>

<p>Para forzar a que sea un entero:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="p">[</span><span class="n">int</span><span class="p">]</span><span class="nv">$edad</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Read-Host</span><span class="w"> </span><span class="s2">"Escribe tu edad"</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="62-operadores-aritm√©ticos">6.2 Operadores aritm√©ticos</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Operador</th>
      <th>Funci√≥n</th>
      <th>Ejemplo</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">+</td>
      <td>Suma</td>
      <td>$resultado = $x + 3</td>
    </tr>
    <tr>
      <td style="text-align: center">-</td>
      <td>Resta</td>
      <td>$resultado = $x - 3</td>
    </tr>
    <tr>
      <td style="text-align: center">*</td>
      <td>Multiplicaci√≥n</td>
      <td>$resultado = $x * 3</td>
    </tr>
    <tr>
      <td style="text-align: center">/</td>
      <td>Divisi√≥n</td>
      <td>$resultado = $x / 3</td>
    </tr>
    <tr>
      <td style="text-align: center">%</td>
      <td>Resto</td>
      <td>$resultado = $x % 3</td>
    </tr>
  </tbody>
</table>

<p><strong>Operadores aritm√©ticos especiales</strong></p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Operador</th>
      <th>Significado</th>
      <th>Ejemplo</th>
      <th>Equivalencia</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">+=</td>
      <td>Incrementa el valor de la variable</td>
      <td>$x+=3</td>
      <td>$x = $x + 3</td>
    </tr>
    <tr>
      <td style="text-align: center">-=</td>
      <td>Reduce el valor de la variable</td>
      <td>$x-=3</td>
      <td>$x = $x - 3</td>
    </tr>
    <tr>
      <td style="text-align: center">*=</td>
      <td>Multiplica el valor de la variable</td>
      <td>$x*=3</td>
      <td>$x = $x * 3</td>
    </tr>
    <tr>
      <td style="text-align: center">/=</td>
      <td>Divide el valor de la variable</td>
      <td>$x/=3</td>
      <td>$x = $x / 3</td>
    </tr>
  </tbody>
</table>

<h3 id="63-operadores-de-comparaci√≥n">6.3 <strong>Operadores de comparaci√≥n</strong></h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Operador</th>
      <th>Significado</th>
      <th>Ejemplo <br />($true)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">-eq</td>
      <td>Igual</td>
      <td>1 -eq 1</td>
    </tr>
    <tr>
      <td style="text-align: center">-ieq</td>
      <td>Igual <br />Con valores de tipo texto, no tendr√° en cuenta la diferencia entre may√∫sculas y min√∫sculas.</td>
      <td>‚ÄúHola‚Äù -ieq ‚ÄúHOLA‚Äù</td>
    </tr>
    <tr>
      <td style="text-align: center">-ceq</td>
      <td>Igual<br />Con valores de tipo texto, tendr√° en cuenta la diferencia entre may√∫sculas y min√∫sculas.</td>
      <td>‚ÄúHOLA‚Äù -ceq ‚ÄúHOLA‚Äù</td>
    </tr>
    <tr>
      <td style="text-align: center">-ne</td>
      <td>Diferente</td>
      <td>3 -ne 5</td>
    </tr>
    <tr>
      <td style="text-align: center">-lt</td>
      <td>Menor</td>
      <td>3 -lt 5</td>
    </tr>
    <tr>
      <td style="text-align: center">-le</td>
      <td>Menor o igual</td>
      <td>5 -le 5<br />3 -le 5</td>
    </tr>
    <tr>
      <td style="text-align: center">-gt</td>
      <td>Mayor</td>
      <td>5 -gt 3</td>
    </tr>
    <tr>
      <td style="text-align: center">-ge</td>
      <td>Mayor o igual</td>
      <td>5 -ge 5<br />5 -ge 3</td>
    </tr>
    <tr>
      <td style="text-align: center">-like</td>
      <td>Es como</td>
      <td>‚ÄúFerm√≠n‚Äù -like ‚ÄúFer*‚Äù</td>
    </tr>
    <tr>
      <td style="text-align: center">-notlike</td>
      <td>No es como</td>
      <td>‚ÄúFerm√≠n‚Äù -notlike ‚ÄúFa*‚Äù</td>
    </tr>
    <tr>
      <td style="text-align: center">-contains</td>
      <td>Contiene</td>
      <td>9,5,2 -contains 5</td>
    </tr>
    <tr>
      <td style="text-align: center">-notcontains</td>
      <td>No contiene</td>
      <td>9,5,2 -notcontains 1</td>
    </tr>
  </tbody>
</table>

<hr />

<h3 id="64-operadores-l√≥gicos">6.4 Operadores l√≥gicos</h3>

<table>
  <thead>
    <tr>
      <th>Operador</th>
      <th>Significado</th>
      <th>Ejemplo</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-and</td>
      <td>AND l√≥gico. TRUE cuando las dos expresiones son ciertas</td>
      <td>(1 -eq 1) -and (1 -eq 2)<br />False</td>
    </tr>
    <tr>
      <td>-or</td>
      <td>OR l√≥gico. TRUE cuando alguna expresi√≥n es cierta</td>
      <td>(1 -eq 1) -or (1 -eq 2) <br />True</td>
    </tr>
    <tr>
      <td>-xor</td>
      <td>OR exclusivo. TRUE cuando s√≥lo una expresi√≥n es cierta</td>
      <td>(1 -eq 1) -xor (2 -eq 2)<br />False</td>
    </tr>
    <tr>
      <td>-not</td>
      <td>Negaci√≥n l√≥gica. Niega la expresi√≥n</td>
      <td>-not (1 -eq 1)<br />False</td>
    </tr>
    <tr>
      <td>!</td>
      <td>Id√©ntico a -not</td>
      <td>!(1 -eq 1)<br />False</td>
    </tr>
  </tbody>
</table>

<h3 id="65-operaciones-con-cadenas">6.5 Operaciones con cadenas</h3>

<ul>
  <li>Una de las operaciones m√°s habituales es la <strong>concatenaci√≥n (+)</strong>, que nos permite unir dos o m√°s variables.</li>
</ul>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nv">$nombre</span><span class="o">=</span><span class="err">‚Äù</span><span class="n">Pepe</span><span class="w"> </span><span class="err">‚Äù</span><span class="w">
</span><span class="nv">$apellidos</span><span class="o">=</span><span class="err">‚Äù</span><span class="n">Garcia</span><span class="w"> </span><span class="nx">Sanchez</span><span class="err">‚Äù</span><span class="w">
</span><span class="nv">$nombreCompleto</span><span class="o">=</span><span class="nv">$nombre</span><span class="o">+</span><span class="nv">$apellidos</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>
    <p>El m√©todo <strong>IndexOf</strong> nos permite buscar un determinado texto.</p>

    <p><img src="/aso/assets/img/powershell/image-20230718093834882.png" alt="image-20230718093834882" /></p>
  </li>
</ul>

<h2 id="7-estructuras-condicionales">7. Estructuras condicionales</h2>

<h3 id="uso-de-la-orden-if">Uso de la orden if</h3>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kr">if</span><span class="p">(</span><span class="n">condicion</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">Bloque</span><span class="w"> </span><span class="nx">de</span><span class="w"> </span><span class="nx">codigo</span><span class="w"> </span><span class="nx">1</span><span class="p">}</span><span class="w">
</span><span class="kr">else</span><span class="w"> </span><span class="p">{</span><span class="n">Bloque</span><span class="w"> </span><span class="nx">de</span><span class="w"> </span><span class="nx">codigo</span><span class="w"> </span><span class="nx">2</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>
    <p>C<em>ondici√≥n</em> se refiere a una expresi√≥n l√≥gica. Es decir, que al evaluarla se obtendr√° un valor <strong>$true</strong> o <strong>$false</strong>.</p>
  </li>
  <li>
    <p>El bloque de c√≥digo ser√° un conjunto de instrucciones que s√≥lo se ejecutar√°n cuando la condici√≥n ofrezca el valor <strong>$true</strong>.</p>
  </li>
</ul>

<h3 id="uso-de-la-orden-switch">Uso de la orden switch</h3>

<p>La instrucci√≥n <strong>switch</strong> permite organizar bloques de c√≥digo de forma que se ejecutan cuando se cumpla la condici√≥n.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kr">switch</span><span class="p">(</span><span class="n">valor</span><span class="w"> </span><span class="nx">de</span><span class="w"> </span><span class="nx">prueba</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="n">Patron</span><span class="w"> </span><span class="nx">1</span><span class="w"> </span><span class="p">{</span><span class="n">Bloque</span><span class="w"> </span><span class="nx">de</span><span class="w"> </span><span class="nx">codigo</span><span class="w"> </span><span class="nx">1</span><span class="p">}</span><span class="w">
</span><span class="n">Patron</span><span class="w"> </span><span class="nx">2</span><span class="w"> </span><span class="p">{</span><span class="n">Bloque</span><span class="w"> </span><span class="nx">de</span><span class="w"> </span><span class="nx">codigo</span><span class="w"> </span><span class="nx">2</span><span class="p">}</span><span class="w">
</span><span class="n">Patron</span><span class="w"> </span><span class="nx">n</span><span class="w"> </span><span class="p">{</span><span class="n">Bloque</span><span class="w"> </span><span class="nx">de</span><span class="w"> </span><span class="nx">codigo</span><span class="w"> </span><span class="nx">n</span><span class="p">}</span><span class="w">
</span><span class="n">default</span><span class="w"> </span><span class="p">{</span><span class="n">Bloque</span><span class="w"> </span><span class="nx">por</span><span class="w"> </span><span class="nx">defecto</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>
<p><strong>Ejemplo 1:</strong></p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="p">[</span><span class="n">Int</span><span class="p">]</span><span class="nv">$x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Read-Host</span><span class="w"> </span><span class="s2">"Introduce un valor"</span><span class="w">
</span><span class="c">#Bloque Switch</span><span class="w">
</span><span class="kr">switch</span><span class="w"> </span><span class="p">(</span><span class="nv">$x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> 
	</span><span class="mi">1</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="c">#Bloque de instrucciones cuando $x es igual a 1</span><span class="w">
		</span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"Has introducido el valor 1"</span><span class="w">
	</span><span class="p">}</span><span class="w">
	</span><span class="mi">2</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="c">#Bloque de instrucciones cuando $x es igual a 2</span><span class="w">
		</span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"Has introducido el valor 2"</span><span class="w">
	</span><span class="p">}</span><span class="w">
	</span><span class="mi">3</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="c">#Bloque de instrucciones cuando $x es igual a 3</span><span class="w">
		</span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"Has introducido el valor 3"</span><span class="w">
	</span><span class="p">}</span><span class="w">
	</span><span class="n">default</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="c">#Cualquier otro valor</span><span class="w">
		</span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"Has introducido cualquier otro valor"</span><span class="w">
	</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Ejemplo 2:</strong></p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="p">[</span><span class="n">int</span><span class="p">]</span><span class="nv">$nota</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Read-Host</span><span class="w"> </span><span class="s2">"Escribe una nota"</span><span class="w">
</span><span class="kr">switch</span><span class="w"> </span><span class="p">(</span><span class="nv">$nota</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
	</span><span class="p">{</span><span class="bp">$_</span><span class="w"> </span><span class="o">-lt</span><span class="w"> </span><span class="mi">5</span><span class="p">}</span><span class="w">						</span><span class="p">{</span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"Suspenso"</span><span class="p">}</span><span class="w">
	</span><span class="p">{(</span><span class="bp">$_</span><span class="w"> </span><span class="o">-ge</span><span class="w"> </span><span class="mi">5</span><span class="p">)</span><span class="w"> </span><span class="o">-and</span><span class="w"> </span><span class="p">(</span><span class="bp">$_</span><span class="w"> </span><span class="o">-le</span><span class="w"> </span><span class="mi">10</span><span class="p">)}</span><span class="w">	</span><span class="p">{</span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"Aprobado"</span><span class="p">}</span><span class="w">
	</span><span class="p">{</span><span class="bp">$_</span><span class="w"> </span><span class="nt">-in</span><span class="w"> </span><span class="mi">1</span><span class="o">..</span><span class="mi">4</span><span class="p">}</span><span class="w">					</span><span class="p">{</span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"Insuficiente"</span><span class="p">}</span><span class="w">
	</span><span class="mi">5</span><span class="w">								</span><span class="p">{</span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"Suficiente"</span><span class="p">}</span><span class="w">
	</span><span class="mi">6</span><span class="w">								</span><span class="p">{</span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"Bien"</span><span class="p">}</span><span class="w">
	</span><span class="p">{</span><span class="bp">$_</span><span class="w"> </span><span class="nt">-in</span><span class="w"> </span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">}</span><span class="w">					</span><span class="p">{</span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"Notable"</span><span class="p">}</span><span class="w">
	</span><span class="p">{</span><span class="bp">$_</span><span class="w"> </span><span class="nt">-in</span><span class="w"> </span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">}</span><span class="w">					</span><span class="p">{</span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"Sobresaliente"</span><span class="p">}</span><span class="w">
	</span><span class="n">default</span><span class="w">							</span><span class="p">{</span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"No conozco esa nota"</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="8-estructuras-repetitivas">8. Estructuras repetitivas</h2>

<p>Todos los lenguajes de programaci√≥n necesitan un m√©todo que les permita repetir un bloque de instrucciones. En PowerShell puedes utilizar:</p>

<ul>
  <li>
    <p><strong>do while</strong>: repite mientras la condici√≥n vale $true</p>
  </li>
  <li>
    <p><strong>while</strong>: repite mientras la condici√≥n vale $true</p>
  </li>
  <li>
    <p><strong>do until</strong>: repite hasta que la condici√≥n vale $true</p>
  </li>
  <li>
    <p><strong>for:</strong> repite durante un n¬∫ de veces</p>
  </li>
  <li>
    <p><strong>foreach:</strong> repite una vez para cada elemento de la lista</p>
  </li>
</ul>

<h3 id="81-la-estructura-do-while">8.1 La estructura do while</h3>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kr">do</span><span class="w"> </span><span class="p">{</span><span class="w"> 
	</span><span class="n">Bloque</span><span class="w"> </span><span class="nx">de</span><span class="w"> </span><span class="nx">codigo</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="kr">while</span><span class="w"> </span><span class="p">(</span><span class="n">condicion</span><span class="p">)</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>
<p><strong>Ejemplo:</strong></p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nv">$a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="kr">do</span><span class="w"> 
</span><span class="p">{</span><span class="w">
	</span><span class="n">Write-Host</span><span class="w"> </span><span class="nv">$a</span><span class="w">
	</span><span class="nv">$a</span><span class="o">++</span><span class="w">
</span><span class="p">}</span><span class="kr">while</span><span class="w"> </span><span class="p">(</span><span class="nv">$a</span><span class="w"> </span><span class="o">-le</span><span class="w"> </span><span class="mi">5</span><span class="p">)</span><span class="w">

</span></pre></td></tr></tbody></table></code></pre></div></div>
<p><strong>Resultado por pantalla:</strong> 
1
2
3
4
5</p>

<h3 id="82-la-estructura-while">8.2 La estructura while</h3>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kr">while</span><span class="w"> </span><span class="p">(</span><span class="n">condicion</span><span class="p">){</span><span class="w">
	</span><span class="n">Bloque</span><span class="w"> </span><span class="nx">de</span><span class="w"> </span><span class="nx">codigo</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Ejemplo:</strong></p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nv">$a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="kr">while</span><span class="w"> </span><span class="p">(</span><span class="nv">$a</span><span class="w"> </span><span class="o">-le</span><span class="w"> </span><span class="mi">5</span><span class="p">)</span><span class="w">
</span><span class="p">{</span><span class="w">
	</span><span class="n">Write-Host</span><span class="w"> </span><span class="nv">$a</span><span class="w">
	</span><span class="nv">$a</span><span class="o">++</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Resultado por pantalla:</strong></p>

<p>1
2
3
4
5</p>

<h3 id="83-la-estructura-do-until">8.3 La estructura do until</h3>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kr">do</span><span class="w"> </span><span class="p">{</span><span class="w">
	</span><span class="n">Bloque</span><span class="w"> </span><span class="nx">de</span><span class="w"> </span><span class="nx">codigo</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="kr">until</span><span class="w"> </span><span class="p">(</span><span class="n">condicion</span><span class="p">)</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Ejemplo:</strong></p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nv">$a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="kr">do</span><span class="w">
</span><span class="p">{</span><span class="w">
	</span><span class="n">Write-Host</span><span class="w"> </span><span class="nv">$a</span><span class="w">
	</span><span class="nv">$a</span><span class="o">++</span><span class="w">
</span><span class="p">}</span><span class="w"> </span><span class="kr">until</span><span class="w"> </span><span class="p">(</span><span class="nv">$a</span><span class="w"> </span><span class="o">-gt</span><span class="w"> </span><span class="mi">5</span><span class="p">)</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Resultado por pantalla:</strong></p>

<p>1
2
3
4
5</p>

<h3 id="84-la-estructura-for">8.4 La estructura for</h3>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kr">for</span><span class="w"> </span><span class="p">(</span><span class="n">inicializacion</span><span class="p">;</span><span class="w"> </span><span class="n">condicion</span><span class="p">;</span><span class="w"> </span><span class="n">incremento</span><span class="p">)</span><span class="w">
</span><span class="p">{</span><span class="w">
	</span><span class="n">Bloque</span><span class="w"> </span><span class="nx">de</span><span class="w"> </span><span class="nx">codigo</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Ejemplo:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kr">for</span><span class="w"> </span><span class="p">(</span><span class="nv">$a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="nv">$a</span><span class="w"> </span><span class="o">-le</span><span class="w"> </span><span class="mi">5</span><span class="p">;</span><span class="w"> </span><span class="nv">$a</span><span class="o">++</span><span class="p">)</span><span class="w">
</span><span class="p">{</span><span class="w">
	</span><span class="n">Write-Host</span><span class="w"> </span><span class="nv">$a</span><span class="w">
</span><span class="p">}</span><span class="w"> 
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Resultado por pantalla:</strong></p>

<p>1
2
3
4
5</p>

<h3 id="85-la-estructura-foreach">8.5 La estructura foreach</h3>

<p>La estructura <strong>foreach</strong> funciona en cualquier situaci√≥n donde pueda obtenerse una lista de elementos.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kr">foreach</span><span class="w"> </span><span class="p">(</span><span class="n">elemento</span><span class="w"> </span><span class="nx">in</span><span class="w"> </span><span class="nx">coleccion</span><span class="p">)</span><span class="w">
</span><span class="p">{</span><span class="w">
	</span><span class="n">Bloque</span><span class="w"> </span><span class="nx">de</span><span class="w"> </span><span class="nx">codigo</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Ejemplo:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kr">foreach</span><span class="w"> </span><span class="p">(</span><span class="nv">$a</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="w">
</span><span class="p">{</span><span class="w">
	</span><span class="n">Write-Host</span><span class="w"> </span><span class="nv">$a</span><span class="w">
</span><span class="p">}</span><span class="w"> 
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Resultado por pantalla:</strong></p>

<p>1
2
3
4
5</p>

<p><strong>Ejemplo:</strong></p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nv">$ruta</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"C:\Windows\System32"</span><span class="w">
</span><span class="nv">$texto</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Read-Host</span><span class="w"> </span><span class="s2">"Escribe el texto a buscar"</span><span class="w">
</span><span class="kr">foreach</span><span class="w"> </span><span class="p">(</span><span class="nv">$archivo</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="n">Get-ChildItem</span><span class="w"> </span><span class="nv">$ruta</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
	</span><span class="kr">if</span><span class="p">(</span><span class="nv">$archivo</span><span class="o">.</span><span class="nf">Name</span><span class="o">.</span><span class="nf">IndexOf</span><span class="p">(</span><span class="nv">$texto</span><span class="p">)</span><span class="w"> </span><span class="o">-ge</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="n">Write-Host</span><span class="w"> </span><span class="nv">$archivo</span><span class="o">.</span><span class="nf">Name</span><span class="w">
	</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/aso/assets/img/powershell/image-20230720204431719.png" alt="image-20230720204431719" /></p>

<h2 id="9-importaci√≥n-de-datos">9 Importaci√≥n de datos</h2>

<ol>
  <li><strong>Importaci√≥n de un archivo de texto</strong></li>
</ol>

<p>Para importar los datos de un fichero .txt usaremos el comando <strong>Get-Content</strong> para almacenar los datos en una variable.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nv">$ciudades</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Get-Content</span><span class="w"> </span><span class="nx">ciudades.txt</span><span class="w">
</span><span class="kr">foreach</span><span class="p">(</span><span class="nv">$ciudad</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="nv">$ciudades</span><span class="p">)</span><span class="w">
</span><span class="p">{</span><span class="w">
	</span><span class="n">Write-Host</span><span class="w"> </span><span class="nv">$ciudad</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="https://lh3.googleusercontent.com/TtRQwDNRx_itz1YhGKWjOxzqRlFjLfDpntT3nXOGIk3msPmFo7ovMJk_SC6dRgQ7pGEunsFXNXQc-3yR994285QmRKEMKLsKkiCd5deFoy_tIy2Uh7oCKqY2UqMDcFnAqkR6x238xNMtaSTLYn5EqbWwpg=s2048" alt="img" /></p>

<p><strong>Importaci√≥n de un archivo CSV</strong></p>

<p>Para importar los datos de un fichero csv usaremos el m√©todo <strong>Import-CSV</strong> para almacenar los datos en una variable.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="nv">$ordenadores</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">import-CSV</span><span class="w"> </span><span class="nx">computers.csv</span><span class="w">
</span><span class="kr">foreach</span><span class="p">(</span><span class="nv">$pc</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="nv">$ordenadores</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
	</span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"Equipo: </span><span class="si">$(</span><span class="nv">$pc</span><span class="o">.</span><span class="nf">Nombre</span><span class="si">)</span><span class="s2"> </span><span class="si">$(</span><span class="nv">$pc</span><span class="o">.</span><span class="nf">IP</span><span class="si">)</span><span class="s2"> </span><span class="si">$(</span><span class="nv">$pc</span><span class="o">.</span><span class="nf">Oficina</span><span class="si">)</span><span class="s2">"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="https://lh4.googleusercontent.com/oWQbVFqzpSUTpMwWeFuHDdnleWjJXb_DVh7yepZPq_T6YKo8Emfwk_eGLgxklv4uUl7EiwEvKOAFAI_yZ-ZrS82KiZul1bZ3HpqT1Wj3XPFrP15CK2z04zc0D_mpfJWwRiu0tvlt1pcJpYah8gFgsqow8g=s2048" alt="img" /></p>

<p><img src="https://lh5.googleusercontent.com/lv4H5XO8V1iKYKGhpxDfHFPQC9PW7MxtQlXsnybhZbfyNBEQP4DnQDe9ZRsX0a43CKL8cmIfx_zwlrGD7UsBIiOC0HcvDOQMWQwVCFLgnTMV8-m4DNttOY5VANeJGEKg_jIsbOFsmpWtwmod-fGRUo1wNQ=s2048" alt="img" /></p>

<p><strong>Import-CSV</strong>: con powershell podemos importar cualquier archivo CSV. Por defecto el delimitador es la coma, pero se puede indicar otro.La cabecera del archivo pasan a ser los nombres de las propiedades pero tambi√©n se pueden indicar otros.</p>

<p><img src="https://lh6.googleusercontent.com/uS2-CyRXvA04jp9IZbw9dbrctMhrR-MFsKJXddh7A_wnKKnewzJq4_AXdaaPu292f2PKmuVm1AXFsaSwVTZHEKF1Y0Hysnd_0BQmwbo4BiocpBOhAljub2NdZSk7F-L25mF4WUe3079-Bty2Lu-oH52RjA=s2048" alt="img" /></p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nv">$empleados</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Import-Csv</span><span class="w"> </span><span class="nx">C:\scripts\empleados.csv</span><span class="w"> </span><span class="nt">-Delimiter</span><span class="w"> </span><span class="err">‚Äú</span><span class="p">;</span><span class="err">‚Äù</span><span class="w">

</span><span class="kr">foreach</span><span class="w"> </span><span class="p">(</span><span class="nv">$em</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="nv">$empleados</span><span class="p">)</span><span class="w">
</span><span class="p">{</span><span class="w">
 	</span><span class="n">Write-Host</span><span class="w"> </span><span class="err">‚Äú</span><span class="nx">Usuario:</span><span class="w"> </span><span class="err">$</span><span class="p">(</span><span class="nv">$em</span><span class="o">.</span><span class="nf">nombre</span><span class="p">)</span><span class="w"> </span><span class="err">$</span><span class="p">(</span><span class="nv">$em</span><span class="o">.</span><span class="nf">apellido</span><span class="p">)</span><span class="err">‚Äù</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="10-funciones">10. Funciones</h2>

<p>Una funci√≥n no es m√°s que un conjunto de instrucciones a las que le damos un nombre.</p>

<p><strong>Sintaxis</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>Function &lt;nombre&gt; { 

&lt;bloque de c√≥digo&gt; 

}
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Ejemplo</strong></p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kr">Function</span><span class="w"> </span><span class="nf">Sumar</span><span class="w"> </span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="w"> </span><span class="nv">$y</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
	</span><span class="nv">$sumar</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$x</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nv">$y</span><span class="w">
	</span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"La respuesta es </span><span class="nv">$sumar</span><span class="s2">"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="kr">function</span><span class="w"> </span><span class="nf">TestPing</span><span class="p">(</span><span class="nv">$Address</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nv">$Result</span><span class="o">=</span><span class="n">Test-Connection</span><span class="w"> </span><span class="nt">-ComputerName</span><span class="w"> </span><span class="nv">$Address</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">

    </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="bp">$?</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="bp">$true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">

            </span><span class="n">write-output</span><span class="w"> </span><span class="s2">"ICMP Test to </span><span class="nv">${Address}</span><span class="s2">: OK"</span><span class="w">

    </span><span class="p">}</span><span class="kr">else</span><span class="p">{</span><span class="w">

            </span><span class="n">write-output</span><span class="w"> </span><span class="s2">"ICMP Test to </span><span class="nv">${Address}</span><span class="s2">: Error"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>En nuestro ejemplo, creamos una funci√≥n denominada <strong>TestPing</strong> para probar la conectividad a una direcci√≥n variable.</p>

<p>Para utilizar la funci√≥n, debemos realizar la llamada:</p>

<p>TestPing (‚Äò8.8.8.8‚Äô)</p>
:ET